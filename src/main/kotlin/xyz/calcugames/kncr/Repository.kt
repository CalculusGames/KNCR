package xyz.calcugames.kncr

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.*
import java.io.File
import java.net.HttpURLConnection
import java.net.URI
import kotlin.io.path.listDirectoryEntries
import kotlin.io.path.relativeTo

@Serializable
class Repository(
    val handle: String,
    val type: String,
    val name: String = handle.substringAfter('/'),
    @SerialName("headers")
    val headersRoot: String = "include",
    val extra: Map<String, String> = emptyMap(),
    @SerialName("definition_extra")
    val definitionExtra: String = "",
    @SerialName("include-c")
    val includeCFiles: Boolean = false,
    val headerFilter: String? = null,
) {
    val folder: String = handle.replace('/', '-')
    val packageName: String
        get() {
            val group = handle.substringBefore('/').replace("[.\\-;:,]".toRegex(), "")
            val artifactId = handle.substringAfter('/').replace("[.\\-;:,]".toRegex(), "_")

            return "com.github.$group.$artifactId"
        }

    suspend fun clone(cwd: File) {
        val command = "git clone --recurse-submodules https://github.com/$handle.git $folder"
        command.runCommand(cwd)
    }

    fun generateDefinitionFile(repoFolder: File): String {
        val headerRoot = if (headersRoot == ".") repoFolder else File(repoFolder, headersRoot)
        if (!headerRoot.exists()) {
            logger.error { "Header root does not exist: $headerRoot" }
            return ""
        }

        logger.debug { "$handle -- Header root: $headerRoot" }
        if (headerFilter != null)
            logger.debug { "Using header filter '$headerFilter' inside $headerRoot" }

        val glob = if (includeCFiles) "*.{h,c}" else "*.h"
        val headers = headerRoot.toPath().listDirectoryEntries(glob)
            .filter { headerFilter == null || Regex(headerFilter).matches(it.fileName.toString()) }
            .joinToString(" ") { it.relativeTo(repoFolder.toPath()).toString().replace('\\', '/') }
            .trim()

        if (headers.isEmpty())
            error("No headers found in $headerRoot")

        val libraryPaths = listOf(
            repoFolder.absolutePath,
            "${repoFolder.absolutePath}/build",
            "${repoFolder.absolutePath}/build/Release",
            "${repoFolder.absolutePath}/build/lib",
            "${repoFolder.absolutePath}/build/lib/Release",
            "${repoFolder.absolutePath}/build/out",
            "${repoFolder.absolutePath}/build/out/Release",
        ).map { it.replace('\\', '/') }

        val staticLibraries = libraryPaths.map { lib ->
            val path = File(lib)
            if (path.exists()) {
                path.toPath().listDirectoryEntries("*.a").joinToString(" ") { it.relativeTo(path.toPath()).toString() }
            } else {
                ""
            }
        }

        var content = """### Generated by KNCR ###
            |headers = $headers
            |package = $packageName
            |libraryPaths = ${libraryPaths.joinToString(" ")}
            |staticLibraries = ${staticLibraries.joinToString(" ").trim()}
            |compilerOpts = ${globalCompilerOpts[os] ?: ""} -I${repoFolder.absolutePath.replace('\\', '/')} -I${headerRoot.absolutePath.replace('\\', '/')}
            |linkerOpts = ${globalLinkerOpts[os] ?: ""}
        """.trimMargin()

        if (definitionExtra.isNotEmpty())
            content += "\n---\n$definitionExtra"

        return content
    }

    private fun figureOutVersion(): String {
        // Try GitHub API
        val token = System.getenv("GITHUB_TOKEN")
        try {
            val url = URI.create("https://api.github.com/repos/$handle/releases/latest").toURL()
            val connection = url.openConnection() as? HttpURLConnection ?: error("Failed to open connection to $url")

            connection.requestMethod = "GET"
            if (!token.isNullOrEmpty())
                connection.setRequestProperty("Authorization", "Bearer $token")

            connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
            connection.connect()

            if (connection.responseCode == 200) {
                val response = connection.inputStream.bufferedReader().use { it.readText() }
                val version = json.decodeFromString<JsonObject>(response)["tag_name"]?.jsonPrimitive?.contentOrNull

                if (version != null)
                    return if (version.startsWith("v")) version.substring(1) else version
            }
        } catch (e: Exception) {
            logger.error(e) { "Failed to get version from GitHub API" }
        }

        // Fallback to using the latest commit hash
        try {
            val url = URI.create("https://api.github.com/repos/$handle/commits").toURL()
            val connection = url.openConnection() as? HttpURLConnection ?: error("Failed to open commit hash connection to $url")

            connection.requestMethod = "GET"
            if (!token.isNullOrEmpty())
                connection.setRequestProperty("Authorization", "Bearer $token")

            connection.setRequestProperty("Accept", "application/vnd.github.v3+json")
            connection.connect()

            if (connection.responseCode == 200) {
                val response = connection.inputStream.bufferedReader().use { it.readText() }
                val version = json.decodeFromString<JsonArray>(response).first().jsonObject["sha"]?.jsonPrimitive?.contentOrNull

                if (version != null)
                    return version.substring(0..7)
            }
        } catch (e: Exception) {
            logger.error(e) { "Failed to get version from GitHub API" }
        }

        // Fallback to v1.0.0
        return "1.0.0"
    }

    fun generatePomFile(): String = """<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- Generated by KNCR -->
    <modelVersion>4.0.0</modelVersion>
    <groupId>${packageName.substringBeforeLast('.')}</groupId>
    <artifactId>${packageName.substringAfterLast('.')}-$publishOs$arch</artifactId>
    <version>${figureOutVersion()}</version>
    <name>$name</name>
    <description>KNCR build for ${handle}</description>
    <url>https://github.com/$handle</url>
</project>"""
}
